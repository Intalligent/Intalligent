var Loader = connection.model('Loader');

require('../../core/controller.js');

function LoaderController(model) {
    this.model = model;
    this.searchFields = [''];
}

LoaderController.inherits(Controller);

var controller = new LoaderController(Loader);

exports.LoaderUpload = function(req,res){
    if (!req.files.file) {
        res.send(201, {result: 0, msg: "'file' is required."});
        return;
    }
    var fs = require('fs'), mongoose = require('mongoose'), csv = require('csv');
    var file = req.files.file, fileId = mongoose.Types.ObjectId(), fileType = file.name.split(".");

    if (String(fileType[1]).toUpperCase() != 'CSV') {
        res.send(201, {result: 0, msg: "Invalid file type"});
        return;
    }

    csv()
        .from.path(file.path, { encoding: 'ascii' })
        .to.array( function(data){
            var fileData = data;
            getFilesConfiguration(function(result) {
                if (result.result == 0) {
                    res.send(201, result);
                    return;
                }
                var filesConfig =  result.filesConfig;

                if (filesConfig.filesSource == 0) { //Local
                    fs.readFile(file.path, function(err, data) {
                        var newPath = __dirname+"/../../../public/uploads/"+fileId+"."+fileType[1];
                        fs.writeFile(newPath, data, function (err) {
                            if(err) throw err;

                            Loader.create({
                                _id: fileId,
                                status: 0,
                                userID: req.user._id,
                                fileURL: config.url+"uploads/"+fileId+"."+fileType[1],
                                fileName: file.name,
                                fileSize: file.size,
                                fileData: fileData
                            }, function(err, file){
                                if(err) throw err;

                                res.send(201, {result: 1, msg: "File loaded", id: file._id, data: fileData.slice(0,10)});
                            });
                        });
                    });
                }
                else if (filesConfig.filesSource == 1) { //Amazon http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/frames.html#!AWS/S3.html
                    var AWS = require('aws-sdk');

                    AWS.config.update({accessKeyId: filesConfig.amazonAccessKeyId, secretAccessKey: filesConfig.amazonSecretAccessKey, region: config.amazon.region});

                    var s3 = new AWS.S3();

                    s3.createBucket({Bucket: config.amazon.bucket}, function() {

                        fs.readFile(file.path, function(err, data) {
                            params = {Bucket: config.amazon.bucket, Key: fileId+'.'+fileType[1], Body: data, ACL: "public-read", ContentType: file.type};

                            s3.putObject(params, function(err) {
                                if(err) throw err;

                                Loader.create({
                                    _id: fileId,
                                    status: 0,
                                    userID: req.user._id,
                                    fileURL: 'https://s3.amazonaws.com/'+config.amazon.bucket+'/'+fileId+"."+fileType[1],
                                    fileName: file.name,
                                    fileSize: file.size,
                                    fileData: fileData
                                }, function(err, file){
                                    if(err) throw err;

                                    res.send(201, {result: 1, msg: "File loaded", id: file._id, data: fileData.slice(0,10)});
                                });
                            });
                        });
                    });
                }
            });
        })
        .on('error', function(error){
            res.send(201, {result: 0, msg: "ERROR loading the file"});
            return;
        });
};

function getFilesConfiguration(done) {
    var Configurations = connection.model('Configurations');
    var filesConfig = {};

    Configurations.getConfiguration('files-source', function(configuration){
        filesConfig.filesSource = configuration.value;

        if (configuration.value == 0) {
            done({result: 1, filesConfig: filesConfig});
        }
        else {
            Configurations.getConfiguration('amazon-access-key-id', function(configuration){
                if (!configuration.value) {
                    done({result: 0, msg: "amazonAccessKeyId not defined"});
                }
                else {
                    filesConfig.amazonAccessKeyId = configuration.value;

                    Configurations.getConfiguration('amazon-secret-access-key', function(configuration){
                        if (!configuration.value) {
                            done({result: 0, msg: "amazonSecretAccessKey not defined"});
                        }
                        else {
                            filesConfig.amazonSecretAccessKey = configuration.value;

                            done({result: 1, filesConfig: filesConfig});
                        }
                    });
                }
            });
        }
    });
}

exports.LoaderImport = function(req,res){
    var data = req.body;

    Loader.update({
        "_id" : data.id
    }, {
        $set: {
            "status" : 2,
            "fileFields" : data.fields
        }
    }, function (err, numAffected) {
        if(err) throw err;

        startLoad(data.id);

        res.send(201, {result: 1, msg: "Import loaded, you will receive an email when the process is complete."});
    });
};

/* LOADER */
var Employees = connection.model('Employees');
var Users = connection.model('Users');
var Positions = connection.model('Positions');
var Units = connection.model('Units');
var Brands = connection.model('Users');
var PositionCategories = connection.model('PositionCategories');
var PositionAreas = connection.model('PositionAreas');
var ProfessionalGroups = connection.model('ProfessionalGroups');

var crypto = require('crypto');
var hash = require('../../../util/hash');

var loadId = null;
var currentEmployee = null;
var loadLog = [];
var loadUser = null;

var employees = null;
var users = null;
var positions = null;
var units = null;
var brands = null;
var positionCategories = null;
var positionAreas = null;
var professionalGroups = null;

var idbrand = '';
var idposition = '';
var thePositionName = '';
var professionalGroupID = undefined;
var positionCategoryID = undefined;
var positionAreaID = undefined;

function loadData(done) {
    Employees.find({},{},{}, function(err, data){
        if(err) throw err;

        employees = data;

        Users.find({},{},{}, function(err, data){
            if(err) throw err;

            users = data;

            Positions.find({},{},{}, function(err, data){
                if(err) throw err;

                positions = data;

                Units.find({},{},{}, function(err, data){
                    if(err) throw err;

                    units = data;

                    Brands.find({},{},{}, function(err, data){
                        if(err) throw err;

                        brands = data;

                        PositionAreas.find({},{},{}, function(err, data){
                            if(err) throw err;

                            positionAreas = data;

                            PositionCategories.find({},{},{}, function(err, data){
                                if(err) throw err;

                                positionCategories = data;

                                ProfessionalGroups.find({},{},{}, function(err, data){
                                    if(err) throw err;

                                    professionalGroups = data;

                                    done();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

function startLoad(id) {
    loadId = id;
    loadLog = [];

    addLog('Starting data dump');

    Loader.findOne({"_id": loadId},{},function(err, load){
        if(err) throw err;

        load = load.toObject();

        Users.findOne({"_id" : load.userID},{},function(err, user){
            if(err) throw err;

            loadUser = user;

            var loadData = [];

            for (var i in load.fileData) {
                var row = String(load.fileData[i]).split(';'), rowObject = {};

                for (var j in load.fileFields) {
                    if (load.fileFields[j] != '') {
                        rowObject[load.fileFields[j]] = row[j];
                    }
                }

                loadData.push(rowObject);
            }

            console.log(loadData);

            addLog('Starting verification process');

            verify(load, function() {
                Loader.update({
                    "_id" : loadId
                }, {
                    $set: {
                        "loadLog" : loadLog,
                        "status" : 3
                    }
                }, function (err, numAffected) {
                    if(err) throw err;
                    sendEmail('Starting loading process', loadLog.toString(), loadUser.email);
                });
            });
        });
    });
}

function verify(data, done) {
    var checkbirddate = true;
    var checkseniority = true;
    var checkstatus = true;
    var checkunit = true;
    var checkemail = true;
    var checkboss = true;
    var checkdocument = true;
    var checkposition = true;
    var checkname = true;

    var NotfoundPositions = [];

    var found = 0;
    var notfound = 0;

    addLog('------------------------------USERS VERIFICATION--------------------------');

    for (var i in data) {
        if (locate('username', data[i].iduser, users) == false && data[i].outDateString == '') {
            newUser(data[i]);
            notfound++;
        }
        else {
            found++;
        }
    }

    addLog('Users Found: '+found);
    addLog('Users Not Found: '+notfound);

    found = 0;
    notfound = 0;

    addLog('-------------EMPLOYEE VERIFICATION-------------------');

    for (var i in data) {
        var fields = data[i];

        idbrand = '';
        idposition = '';
        thePositionName = '';
        professionalGroupID = undefined;
        positionCategoryID = undefined;
        positionAreaID = undefined;

        var professionalGroup = locateDocument('code', fields.idProfessionalGroup,  professionalGroups);
        if (professionalGroup != undefined)
            professionalGroupID = professionalGroup._id;

        var positionCategory = locateDocument('code', fields.idPositionCategory,  positionCategories);
        if (positionCategory != undefined)
            positionCategoryID = positionCategory._id;

        var positionArea = locateDocument('code', fields.idPositionArea,  positionAreas);
        if (positionArea != undefined)
            positionAreaID = positionArea._id;

        //identificar la marca de esa unidad
        if (unit = locateDocument('unit', fields.idunit,  units)) {
            idbrand = unit.brand;
            fields.idbrand = unit.brand;

            if (fields.idProfessionalGroup == 'III' || fields.idProfessionalGroup == 'IV') {
                if (professionalGroupID != undefined &&  positionAreaID != undefined)
                {
                    for (var p in positions) {
                        var position = positions[p];

                        if (position.positionBrand == idbrand && position.professionalGroup == professionalGroupID && position.positionArea == positionAreaID) {
                            idposition = position._id;
                            thePositionName = position.positionName;
                            break;
                        }
                    }
                }

            } else {
                for (var p in positions) {
                    var position = positions[p];

                    if (position.positionBrand == idbrand && position.professionalGroup == professionalGroupID && position.positionCategory == positionCategoryID && position.positionArea == positionAreaID) {
                        idposition = position._id;
                        thePositionName = position.positionName;
                        break;
                    }
                }
            }

            if (idposition == '')
                addLog('POSITION NOT FOUND FOR PROFESSIONAL GROUP: '+fields.idProfessionalGroup+' POSITION CATEGORY: '+fields.idPositionCategory+' POSITION AREA: '+fields.idPositionArea+' BRAND: '+idbrand);
        }
        else {
            addLog('Unit '+fields.idunit+' not found...');
        }

        currentEmployee = null;

        if ((currentEmployee = locate('employeeCode', data[i].iduser, employees)) == false && data[i].outDateString == '') {
            newEmployee(data[i]);
            notfound++;
        }
        else if (currentEmployee) {
            found++;

            if (checkname) {
                if (String(fields.name).replace('-', '')+' '+String(fields.surname1).replace('-', '')+' '+String(fields.surname2).replace('-', '') != currentEmployee.employeeName) {
                    addLog('CHANGE NAME: '+fields.iduser+' UNIT: '+fields.idunit+' OLD NAME= '+currentEmployee.employeeName+' NEW NAME = '+fields.name+' '+fields.surname1+' '+fields.surname2);

                    Employees.update({
                        "employeeCode" : fields.iduser
                    }, {
                        $set: {
                            "employeeName" : String(fields.name).replace('-', '')+' '+String(fields.surname1).replace('-', '')+' '+String(fields.surname2).replace('-', '')
                        }
                    }, function (err, numAffected) {
                        if(err) throw err;
                    });
                }
            }

            if (checkposition)
                if (idposition != '' && idposition != currentEmployee.payrollPosition) {
                    addLog('CHANGE POSITION FOR USER: '+fields.iduser+' UNIT: '+fields.idunit+' OLD POSITION= '+currentEmployee.payrollPosition+' NEW POSITION = '+idposition);

                    Employees.update({
                        "employeeCode" : fields.iduser
                    }, {
                        $set: {
                            "payrollPosition" : idposition
                        }
                    }, function (err, numAffected) {
                        if(err) throw err;
                    });
                }

            if (checkdocument) {
                if (fields.document != '' && fields.document != currentEmployee.idcardnbr) {
                    addLog('CHANGE DOCUMENT: '+fields.iduser+' UNIT: '+fields.idunit);

                    Employees.update({
                        "employeeCode" : fields.iduser
                    }, {
                        $set: {
                            "idcardnbr" : fields.document
                        }
                    }, function (err, numAffected) {
                        if(err) throw err;
                    });
                }
            }

            if (checkboss) {
                if (fields.boss != '' && fields.boss != currentEmployee.dependsOnId) {
                    addLog('CHANGE DEPENDENCY: '+fields.iduser+' UNIT: '+fields.idunit+' OLD DEPENDENCY= '+currentEmployee.dependsOnId+' NEW DEPENDENCY = '+fields.boss);

                    Employees.update({
                        "employeeCode" : fields.iduser
                    }, {
                        $set: {
                            "dependsOnId" : fields.boss
                        }
                    }, function (err, numAffected) {
                        if(err) throw err;
                    });
                }
            }

            if (checkemail) {
                if (fields.email != '' && fields.email != currentEmployee.emailAddress) {
                    addLog('CHANGE EMAIL: '+fields.iduser+' UNIT: '+fields.idunit+' OLD EMAIL= '+currentEmployee.emailAddress+' NEW EMAIL = '+fields.email);

                    Employees.update({
                        "employeeCode" : fields.iduser
                    }, {
                        $set: {
                            "emailAddress" : fields.email
                        }
                    }, function (err, numAffected) {
                        if(err) throw err;
                    });
                }
            }

            if (checkunit) {
                if (fields.idunit != '' && fields.idunit != currentEmployee.idunit) {
                    addLog('CHANGE IDUNIT: '+fields.iduser+' UNIT: '+fields.idunit+' OLD UNIT= '+currentEmployee.idunit+' NEW UNIT = '+fields.idunit);

                    Employees.update({
                        "employeeCode" : fields.iduser
                    }, {
                        $set: {
                            "idunit" : fields.idunit
                        }
                    }, function (err, numAffected) {
                        if(err) throw err;
                    });

                    Users.findOne({"username" : fields.iduser},{},function(err, user){
                        if(err) throw err;

                        if (user != undefined)
                        {

                            var userFilters = user.filters;

                            for (var u = 0 ; u < userFilters.length ; u++) {
                                if (userFilters[u].name == 'IDUNIT') {
                                    userFilters[u].value = fields.idunit;
                                    break;
                                }
                            }

                            Users.update({
                                "username" : fields.iduser
                            }, {
                                $set: {
                                    "filters" : userFilters
                                }
                            }, function (err, numAffected) {
                                if(err) throw err;
                            });

                        } else {
                            addLog('USER NOT FOUND FOR EMPLOYEE: '+fields.iduser+' UNIT: '+fields.idunit);
                        }

                    });
                }
            }

            var employeestatus = 'Active';

            if (fields.outCause != '')
                employeestatus = 'Out of the Company';

            if (checkstatus) {
                if (employeestatus != currentEmployee.status) {
                    addLog('CHANGE STATUS: '+fields.iduser+' UNIT: '+fields.idunit+' OLD STATUS= '+currentEmployee.status+' NEW STATUS = '+employeestatus);

                    Employees.update({
                        "employeeCode" : fields.iduser
                    }, {
                        $set: {
                            "status" : employeestatus
                        }
                    }, function (err, numAffected) {
                        if(err) throw err;
                    });
                }
            }

            if (checkstatus) {
                if (fields.outCause != '' && fields.outCause != currentEmployee.outCompanyCause) {
                    addLog('CHANGE OUT_COMPANY_CAUSE: '+fields.iduser+' UNIT: '+fields.idunit+' OLD OUT_COMPANY_CAUSE= '+currentEmployee.outCompanyCause+' NEW OUT_COMPANY_CAUSE = '+fields.outCause);

                    Employees.update({
                        "employeeCode" : fields.iduser
                    }, {
                        $set: {
                            "outCompanyCause" : fields.outCause
                        }
                    }, function (err, numAffected) {
                        if(err) throw err;
                    });
                }
            }

            if (checkstatus) {
                if (fields.outDateString != '') {
                    var y =  String(fields.outDateString).substr(0, 4);
                    var m =  String(fields.outDateString).substr(4, 2);
                    var d =  String(fields.outDateString).substr(6, 2);

                    if (currentEmployee.outCompanyDate == '' || new Date(y, m, d) != currentEmployee.outCompanyDate) {
                        addLog('CHANGE OUT_COMPANY_DATE: '+fields.iduser+' UNIT: '+fields.idunit+' OLD OUT_COMPANY_DATE= '+currentEmployee.outCompanyDate+' NEW OUT_COMPANY_DATE = '+fields.outDateString);

                        Employees.update({
                            "employeeCode" : fields.iduser
                        }, {
                            $set: {
                                "outCompanyDate" : new Date(y, m, d)
                            }
                        }, function (err, numAffected) {
                            if(err) throw err;
                        });
                    }
                }
            }

            if (checkbirddate) {
                if (fields.birdthDateString != '') {
                    var y =  String(fields.birdthDateString).substr(0, 4);
                    var m =  String(fields.birdthDateString).substr(4, 2);
                    var d =  String(fields.birdthDateString).substr(6, 2);

                    if (currentEmployee.birthDate == '') {
                        addLog('CHANGE BIRDTH DATE: '+fields.iduser+' UNIT: '+fields.idunit+' OLD BIRDTHDAY= '+currentEmployee.birthDate+' NEW BIRDTHDAY = '+fields.birdthDateString);

                        Employees.update({
                            "employeeCode" : fields.iduser
                        }, {
                            $set: {
                                "birthDate" : new Date(y, m, d)
                            }
                        }, function (err, numAffected) {
                            if(err) throw err;
                        });
                    }
                }
            }

            if (checkseniority) {
                if (fields.seniorityDateString != '') {
                    var y =  String(fields.seniorityDateString).substr(0, 4);
                    var m =  String(fields.seniorityDateString).substr(4, 2);
                    var d =  String(fields.seniorityDateString).substr(6, 2);

                    if (currentEmployee.seniorityDate == '') {
                        addLog('CHANGE SENIORITY DATE: '+fields.iduser+' UNIT: '+fields.idunit+' OLD SENIORITY= '+currentEmployee.seniorityDate+' NEW SENIORITY = '+fields.seniorityDateString);

                        Employees.update({
                            "employeeCode" : fields.iduser
                        }, {
                            $set: {
                                "seniorityDate" : new Date(y, m, d)
                            }
                        }, function (err, numAffected) {
                            if(err) throw err;
                        });
                    }
                }
            }
        }
    }

    addLog('Total Empleados encontrados: '+found);
    addLog('Total Empleados no encontrados: '+notfound);

    done();
}

function newUser(field) {
    var user = {}, userFilters = [];
    var password = crypto.createHash('md5').update(String(Math.random().toString(36).substr(2,9))).digest('hex');

    addLog('USER NOT FOUND: '+field.iduser+' UNIT: '+field.idunit);

    user.name = field.name+' '+field.surname1+' '+field.surname2;
    user.status = 1;
    user.username = field.iduser;
    user.language = "es";
    user.email = field.email;

    userFilters.push({name: 'IDUNIT', value: field.idunit});

    if (unit = locateDocument('unit', field.idunit,  units)) {
        userFilters.push({name: 'BRAND', value: unit.brand});
    }

    user.filters = userFilters;
    user.roles = ["52988ad4df1fcbc201000009"];

    hash(password, function(err, salt, hash){
        if(err) {
            throw err;
        }
        user.salt = salt,
        user.hash = hash;

        Users.create(user, function(err, theUser){
            if(err) throw err;

            var postData = {
                id: "5346b6b50ae72b8416000017",
                email: user.email,
                tags: '{"EMAIL": "'+user.email+'", "PASSWORD": "'+password+'", "URL": "'+config.url+'login"}'
            };
            sendCommunication(postData);
        });
    });
}
function newEmployee(field) {
    var employee = {};

    employee.employeeCode = field.iduser;
    employee.employeeName = field.name+' '+field.surname1+' '+field.surname2;

    employee.status = 'Active';

    if (field.evaluable == '' && field.outCause == '')
        employee.status = 'Temporary Leave';

    if (field.outCause != '')
        employee.status = 'Out of the Company';

    if (employee.status == 'Out of the Company')
        return;

    addLog('EMPLOYEE NOT FOUND: '+field.iduser+' UNIT: '+field.idunit);

    if (field.email != '') employee.emailAddress = field.email;

    employee.idunit = field.idunit;
    employee.dependsOnId = field.boss;
    employee.actualPosition = idposition;

    if (field.birthDateString != '') {
        var y =  String(field.birthDateString).substr(0, 4);
        var m =  String(field.birthDateString).substr(4, 2);
        var d =  String(field.birthDateString).substr(6, 2);

        employee.birthDate = new Date(y, m, d);
    }

    if (field.seniorityDateString != '') {
        var y =  String(field.seniorityDateString).substr(0, 4);
        var m =  String(field.seniorityDateString).substr(4, 2);
        var d =  String(field.seniorityDateString).substr(6, 2);

        employee.seniorityDate = new Date(y, m, d);
    }

    employee.sex = (field.sex == 1) ? 'Man' : 'Woman';

    employee.nd_trash_deleted = false;

    Employees.create(employee, function(err){
        if(err) throw err;
    });
}

function addLog(string) {
    loadLog.push(string);
    console.log(string);
}

function locate(field, value, data) {
    for (var i in data) {
        if (data[i][field] == value) {
            return data[i][field]
        }
    }

    return false;
}

function locateDocument(field, value, data) {
    for (var i in data) {
        if (data[i][field] == value) {
            return data[i]
        }
    }

    return false;
}

function sendEmail(emailSubject, emailMessage, emailTo) {
    var nodemailer = require("nodemailer");

    var transportSMTP = nodemailer.createTransport("SMTP", {
        host: 'smtp.db-team.com', // hostname
        secureConnection: false, // use SSL
        port: 25, // port for secure SMTP
        auth: {
            user: 'no_reply@db-team.com',
            pass: 'no_reply_5'
        }
    });

    var mailOptions = {
        from: "NodeDream <no_reply@db-team.com>", // sender address
        to: emailTo, // list of receivers
        subject: emailSubject, // Subject line
        html: emailMessage // html body
    };

    transportSMTP.sendMail(mailOptions, function(error, response){
        if(error){
            console.log(error);
        }else{
            console.log(response);
        }

        transportSMTP.close(); // shut down the connection pool, no more messages
    });
}